
              #+title: clojure-lsp: One Tool To Lint Them All




                          [[file:images/clojure-lsp-logo.png]]





                                                   [[file:images/profile.png]] @ericdallo


* Hello Clojurians!

** Software engineer at Nubank [[file:images/nubank.png]]

* Hello Clojurians!

** Software engineer at Nubank [[file:images/nubank.png]]

** Tech subjects
- Emacs
- Linux / NixOS
- Dev Tooling

* Hello Clojurians!

** Software engineer at Nubank [[file:images/nubank.png]]

** Tech subjects
- Emacs
- Linux / NixOS
- Dev Tooling

** Open Source projects
- clojure-lsp
- deps-bin
- clj-easy
- lsp-mode
- lsp-dart
- jet.el
- hover.el

* About Nubank

[[file:images/nubank-building.png]]

SÃ£o Paulo, Brazil

* About Nubank

[[file:images/nubank-front.png]]         [[file:images/nubank-qrcode.png]]

- +80 million customers

- +1800 Software engineers

- +1300 Clojure micro services


* What will we cover?

- The problem

* What will we cover?

- The problem

- What is clojure-lsp

* What will we cover?

- The problem

- What is clojure-lsp

- How it's related to linting?

* What will we cover?

- The problem

- What is clojure-lsp

- How it's related to linting?

- Features

* What will we cover?

- The problem

- What is clojure-lsp

- How it's related to linting?

- Features

- Configuration across different projects and editors

* What will we cover?

- The problem

- What is clojure-lsp

- How it's related to linting?

- Features

- Configuration across different projects and editors

- How we are using at Nubank?

* What will we cover?

- The problem

- What is clojure-lsp

- How it's related to linting?

- Features

- Configuration across different projects and editors

- How we are using at Nubank?

- Custom linters

* What will we cover?

- The problem

- What is clojure-lsp

- How it's related to linting?

- Features

- Configuration across different projects and editors

- How we are using at Nubank?

- Custom linters

- When should you use clojure-lsp as linter?

* The problem we had

** No lint tool standard in projects

- clj-kondo
- eastwood
- bikeshed
- nsorg
- cljfmt
- zprint
- kibit

* The problem we had

** No lint tool standard in projects

- clj-kondo
- eastwood
- bikeshed
- nsorg
- cljfmt
- zprint
- kibit

*More lint tools == Harder to manage/standardize*

* The problem we had

** No config standard

* The problem we had

** No config standard

- Remove new lines?

- Vertical alignment?

- Warn about deprecated or just info about it?

- Outdated linter versions in some projects

* The problem we had

** No standard between different editors

- How handle different editors? Emacs, VScode, Vim, Intellij

- How avoid local configs in each dev machines?

* What is clojure-lsp?

                    Language Server Protocol
#+ATTR_ORG: :width 1400
     [[file:images/lsp-language-editor.png]]

* What is clojure-lsp?

- Open Source [[https://github.com/clojure-lsp/clojure-lsp][github.com/clojure-lsp]]

* What is clojure-lsp?

- Open Source [[https://github.com/clojure-lsp/clojure-lsp][github.com/clojure-lsp]]

- Made in Clojure

* What is clojure-lsp?

- Open Source [[https://github.com/clojure-lsp/clojure-lsp][github.com/clojure-lsp]]

- Made in Clojure

- Good oportunity to join the Clojure community

* How it's related to linting?

- Understands your project source-paths, classpath and analysis

** The idea

[[file:images/clojure-lsp-api-issue.png]]


* How it's related to linting?

clojure-lsp already:

- Knows your project classpath, source-paths and analysis

* How it's related to linting?

clojure-lsp already:

- Knows your project classpath, source-paths and analysis

- Uses ~clj-kondo~ for _diagnostics_ and analysis

* How it's related to linting?

clojure-lsp already:

- Knows your project classpath, source-paths and analysis

- Uses ~clj-kondo~ for _diagnostics_ and analysis

- Uses ~cljfmt~ for _formatting_

* How it's related to linting?

clojure-lsp already:

- Knows your project classpath, source-paths and analysis

- Uses ~clj-kondo~ for _diagnostics_ and analysis

- Uses ~cljfmt~ for _formatting_

- Has the logic to _clean-ns_ and _refactorings_ based on analysis

* How it's related to linting?

clojure-lsp already:

- Knows your project classpath, source-paths and analysis

- Uses ~clj-kondo~ for _diagnostics_ and analysis

- Uses ~cljfmt~ for _formatting_

- Has the logic to _clean-ns_ and _refactorings_ based on analysis


*Why not provide those features via API / CLI?*

* Main features

* Main features

- ~diagnostics~

  Return project findings like unused public vars, redundant code and more.
  Source: clj-kondo, clj-depend and built-in

* Main features

- ~diagnostics~

  Return project findings like unused public vars, redundant code and more.
  Source: clj-kondo, clj-depend and built-in
#+ATTR_ORG: :width 800
[[file:images/diagnostics.png]]

* Main features

- ~diagnostics~

  Return project findings like unused public vars, redundant code and more.
  Source: clj-kondo, clj-depend and built-in
#+ATTR_ORG: :width 800
[[file:images/diagnostics.png]]
#+ATTR_ORG: :width 1200
[[file:images/diagnostics-cli.png]]

* Main features

- ~clean-ns~

  Fix or report unused/unsorted requires, imports, alias and refers.
  Source: built-in

* Main features

- ~clean-ns~

  Fix or report unused/unsorted requires, imports, alias and refers.
  Source: built-in


     Before                                After
#+ATTR_ORG: :width 750
[[file:images/clean-ns.png]]            [[file:images/clean-ns-fix.png]]

* Main features

- ~clean-ns~

  Fix or report unused/unsorted requires, imports, alias and refers.
  Source: built-in
   #+ATTR_ORG: :width 800
   [[file:images/clean-ns-cli.png]]

* Main features

- ~format~

  Fix or report files not formatted with cljfmt.
  Source: cljfmt

* Main features

- ~format~

  Fix or report files not formatted with cljfmt.
  Source: cljfmt

     Before                                    After
  #+ATTR_ORG: :width 500
  [[file:images/format.png]]                    [[file:images/format-fix.png]]

* Main features

- ~format~

  Fix or report files not formatted with cljfmt.
   #+ATTR_ORG: :width 700
    [[file:images/format-cli.png]]


* Main features

- ~dump~
  Return all analysis of your project, useful for specific analysis of codebases.

* Main features

- ~dump~
  Return all analysis of your project, useful for specific analysis of codebases.

   #+ATTR_ORG: :width 1300
    [[file:images/dump-cli.png]]

* How to use?

* How to use?

- API: ~clojure-lsp.api~

* How to use?

- API: ~clojure-lsp.api~

- CLI: ~clojure-lsp --help~

* How to use?

- API: ~clojure-lsp.api~

- CLI: ~clojure-lsp --help~

- CI: setup-clojure-lsp Github Action

* How to use?

- API: ~clojure-lsp.api~

- CLI: ~clojure-lsp --help~

- CI: setup-clojure-lsp Github Action

- Leiningen: ~lein-clojure-lsp~ plugin

* How to use?

- API: ~clojure-lsp.api~

- CLI: ~clojure-lsp --help~

- CI: setup-clojure-lsp Github Action

- Leiningen: ~lein-clojure-lsp~ plugin

- Babashka pod: use ~clojure-lsp.api~ from Babashka code.

* Exportable configurations

* Exportable configurations

** clj-kondo

- Searches the classpath for
  ~clj-kondo.exports/<your-org>/<your-libname>/~ dir with configs and copy to ~.clj-kondo/~

* Exportable configurations

** clj-kondo

- Searches the classpath for
  ~clj-kondo.exports/<your-org>/<your-libname>/~ dir with configs and copy to ~.clj-kondo/~

** clojure-lsp

- Searches the classpath for
  ~clojure-lsp.exports/<your-org>/<your-libname>/~ dir with configs and consider it during usage.


* How we are using at Nubank?

** nubank/some-common-lib

~src/some_common_lib/core.clj~

#+BEGIN_SRC clojure
(defmacro my-custom-macro [& args]
  ,,,)
#+END_SRC

* How we are using at Nubank?

** nubank/some-common-lib

~src/some_common_lib/core.clj~

#+BEGIN_SRC clojure
(defmacro my-custom-macro [& args]
  ,,,)
#+END_SRC

Usage:
#+ATTR_ORG: :width 1400
[[file:images/macro-lint.png]]

* How we are using at Nubank?

** nubank/some-common-lib

~resources/clj-kondo.exports/nubank/some-common-lib/config.edn~

#+BEGIN_SRC clojure
{:lint-as
 {some-common-lib.core/my-custom-macro clojure.core/defn}}
#+END_SRC

~resources/clojure-lsp.exports/nubank/some-common-lib/config.edn~

#+BEGIN_SRC clojure
{:cljfmt
 {:indents
  {some-common-lib.core/my-custom-macro [[:inner 0]]}}}
#+END_SRC

* How we are using at Nubank?

** nubank/codestyle

~resources/clj-kondo.exports/nubank/codestyle/config.edn~

#+BEGIN_SRC clojure
{:config-paths ["nubank/some-common-lib"
                "nubank/other-common-lib"]}
#+END_SRC

~resources/clojure-lsp.exports/nubank/codestyle/config.edn~

#+BEGIN_SRC clojure
{:classpath-config-paths ["nubank/some-common-lib"
                          "nubank/other-common-lib"]}
#+END_SRC

* How we are using at Nubank?

** nubank/some-service

~.clj-kondo/config.edn~

#+BEGIN_SRC clojure
{:config-paths ["nubank/codestyle"]}
#+END_SRC

~.lsp/config.edn~

#+BEGIN_SRC clojure
{:classpath-config-paths ["nubank/codestyle"]}
#+END_SRC

* How we are using at Nubank?

Properly linted:

#+ATTR_ORG: :width 1200
[[file:images/macro-lint-fixed.png]]

* How we are using at Nubank?

- ~codestyle~ goes into dev profile only
#+ATTR_ORG: :width 1700
[[file:images/codestyle-summary.png]]

* How we are using at Nubank?

** Consistent library updates

* How we are using at Nubank?

** Consistent library updates

[[file:images/bumpito.png]]

[[file:images/bumpito-lint-fix.png]]

* Custom linters

* Custom linters

[[file:images/wrong-dates.png]]

* Custom linters

[[file:images/wrong-dates.png]]      [[file:images/wrong-dates-explanation.png]]

* Custom linters

[[file:images/wrong-dates.png]]      [[file:images/wrong-dates-explanation.png]]

- Warn about specific code that we had issues in the past

* Custom linters

[[file:images/wrong-dates.png]]      [[file:images/wrong-dates-explanation.png]]

- Warn about specific code that we had issues in the past

- clj-kondo hooks / reg-finding!

* Custom linters

~resources/clj-kondo.exports/nubank/date-lib/config.edn~

#+BEGIN_SRC clojure
{:hooks {:analyze-call
         {date-lib/parse-my-date date-lib/parse-my-date}}
 :linters {:avoid-upper-case-year-notation {:level :warning}}}
#+END_SRC

~resources/clj-kondo.exports/nubank/date-lib/nubank/some_common_date.clj~

#+BEGIN_SRC clojure
(clj-kondo.hooks/reg-finding!
  {:message "Avoid 'Y' date notation, use 'y' instead"
   :type :avoid-upper-case-year-notation})
#+END_SRC

* Custom linters

#+ATTR_ORG: :width 1800
[[file:images/custom-linter.png]]

* Custom linters

#+ATTR_ORG: :width 1800
[[file:images/custom-linter.png]]

#+ATTR_ORG: :width 1800
[[file:images/custom-linter-2.png]]

* When should you use clojure-lsp as linter?


* When should you use clojure-lsp as linter?

- Don't want to handle multiple linters

* When should you use clojure-lsp as linter?

- Don't want to handle multiple linters

- Lint the project, not specific folders

* When should you use clojure-lsp as linter?

- Don't want to handle multiple linters

- Lint the project, not specific folders

- Need consistency across multiple projects

* When should you use clojure-lsp as linter?

- Don't want to handle multiple linters

- Lint the project, not specific folders

- Need consistency across multiple projects

- Need consistency across custom linters

* When should you use clojure-lsp as linter?

- Don't want to handle multiple linters

- Lint the project, not specific folders

- Need consistency across multiple projects

- Need consistency across custom linters

- Need consistency between +all+ most editors

* When should you use clojure-lsp as linter?

- Don't want to handle multiple linters

- Lint the project, not specific folders

- Need consistency across multiple projects

- Need consistency across custom linters

- Need consistency between +all+ most editors

- Deep analysis of projects (dump feature)

* Thank you!

*Happy lint!*

Documentation - [[https://clojure-lsp.io][clojure-lsp.io]]

Any questions?

-----

î Slides - [[https://github.com/ericdallo/talks][https://github.com/ericdallo/talks]]
ï Github - [[https://github.com/ericdallo][ericdallo]]
ï Twitter - [[https://twitter.com/ericdallo][@ericdallo]]
ï¬ website - [[https://ericdallo.dev][ericdallo.dev]]
